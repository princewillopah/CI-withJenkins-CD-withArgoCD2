pipeline{
    agent{
        label "Jenkins-Slave-Agent-Node-Label"
    }
    tools {
        jdk 'Java17'
        maven 'maven3'
    }
    environment{
      APP_NAME = "registration-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "princewillopah"
        DOCKER_PASS = "DockerHub-credential-for-Jenkins"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }
    stages{
        stage("Cleanup Workspace"){
            steps{
                cleanWs()
            }
            post{
                always{
                    echo "========always========="
                }
                success{
                    echo "======== Cleanup Workspace executed successfully========"
                }
                failure{
                    echo "======== Cleanup Workspace execution failed========"
                }
            }
        }
        stage("Checkout From SCM"){
            steps{
               git branch: 'master', credentialsId: 'Github-Credentials', url: 'https://github.com/princewillopah/reg-app-CI-withJenkins-CD-withArgoCD2'
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Checkout From SCM executed successfully========"
                }
                failure{
                    echo "======== Checkout From SCM execution failed========"
                }
            }
        }
        stage("Build Application "){
            steps{
               sh "mvn clean package"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Build Application  executed successfully========"
                }
                failure{
                    echo "======== Build Application  execution failed========"
                }
            }
        }

       stage("Test Application "){
            steps{
               sh "mvn test"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Test Application  executed successfully========"
                }
                failure{
                    echo "======== Test Application  execution failed========"
                }
            }
        }
       stage("SonarQube Analysis  "){
            steps{
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token'){ sh "mvn sonar:sonar"}
                   
                }
              
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Test Application  executed successfully========"
                }
                failure{
                    echo "======== Test Application  execution failed========"
                }
            }
        }

        //         stage("Quality Gate") {
        //             steps {
        //             //  script {
        //             //       waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
        //             //    }

        //                 script {
        //                     def qg = waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
        //                     if (qg.status == 'OK') {
        //                         echo 'Quality Gate passed - SonarQube analysis successful'
        //                     } else if (qg.status == 'ERROR') {
        //                         echo 'Quality Gate failed - SonarQube analysis did not meet the criteria'
        //                         // You can perform additional actions here if needed
        //                     } else {
        //                         echo "Quality Gate status is '${qg.status}', waiting for completion"
        //                         // You can choose to wait or proceed with other actions based on the status
        //                     }
        //                 }
        //             }
                
        //     post{
        //         always{
        //             echo "========always========"
        //         }
        //         success{
        //             echo "======== Test Application  executed successfully========"
        //         }
        //         failure{
        //             echo "======== Test Application  execution failed========"
        //         }
        //     }
        // }
       stage("Build & Push Docker Image "){
            steps{
                // script {
                //    docker.withRegistry('', DOCKER_PASS){ docker_image = docker.build "${IMAGE_NAME}"}
                //    docker.withRegistry('', DOCKER_PASS){ 
                //                                     docker_image.push("${IMAGE_TAG}")
                //                                     docker_image.push('latest')
                //                                     }
                // }

            script {
                docker.withRegistry('', DOCKER_PASS) { 
                docker_image = docker.build "${IMAGE_NAME}"
                docker.tag("${IMAGE_NAME}", "${IMAGE_NAME}:${IMAGE_TAG}")
                docker_image.push("${IMAGE_NAME}:${IMAGE_TAG}")
                docker_image.push("${IMAGE_NAME}:latest")
               }
              
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Test Application  executed successfully========"
                }
                failure{
                    echo "======== Test Application  execution failed========"
                }
            }
        }
       }//Build & Push Docker Image 

   stage("Trivy Scan") {
           steps {
               script {
	            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image princewillopah/register-app-pipeline:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
               }
           }
       }//


       stage ('Cleanup Artifacts') {// this will clear previously created artifacts(docker-image) from workplace 
           steps {
               script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
               }
          }
       }//

       stage("Trigger CD Pipeline") {
            steps {

                script {
                    sh """
                        curl -v -k --user admin:${JENKINS_API_TOKEN} -X POST \
                        -H 'cache-control: no-cache' \
                        -H 'content-type: application/x-www-form-urlencoded' \
                        --data "IMAGE_TAG=${env.IMAGE_TAG}" \
                        'ec2-13-51-159-78.eu-north-1.compute.amazonaws.com:8080/job/reg-app-gitops/buildWithParameters?token=gitops-token'
                    """
                    }
                // script {
                //     sh "curl -v -k --user admin:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' 'ec2-13-51-159-78.eu-north-1.compute.amazonaws.com:8080/job/reg-app-gitops/buildWithParameters?token=gitops-token'"
                // }
            }
            }
    //    stage("Trigger GitOps CD Pipeline!!") {
    //         steps {

    //             script {
    //                 sh """
    //                     curl -v -k --user admin:${JENKINS_API_TOKEN} -X POST \
    //                     -H 'cache-control: no-cache' \
    //                     -H 'content-type: application/x-www-form-urlencoded' \
    //                     --data "IMAGE_TAG=${env.IMAGE_TAG}" \
    //                     'ec2-13-51-159-78.eu-north-1.compute.amazonaws.com:8080/job/reg-app-gitops/buildWithParameters?token=gitops-token'
    //                 """
    //                 }

    //         }
    //    }//Trigger CD Pipeline


                // stage("Trigger GitOps CD Pipeline!") {
                //     steps {
                //         script {
                //             def response = sh(script: """
                //                 curl -v -k --user admin:${JENKINS_API_TOKEN} -X POST \
                //                 -H 'cache-control: no-cache' \
                //                 -H 'content-type: application/x-www-form-urlencoded' \
                //                 --data "IMAGE_TAG=${env.IMAGE_TAG}" \
                //                 'ec2-13-51-159-78.eu-north-1.compute.amazonaws.com:8080/job/reg-app-gitops/buildWithParameters?token=gitops-token'
                //             """, returnStdout: true).trim()

                //             echo "Response from CD pipeline: ${response}"
                //         }
                //     }
                // }

       }//

    }// end stages 

//     post {
//        failure {
//              emailext body: '''${SCRIPT, template="groovy-html.template"}''', 
//                       subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Failed", 
//                       mimeType: 'text/html',to: "ashfaque.s510@gmail.com"
//       }
//       success {
//             emailext body: '''${SCRIPT, template="groovy-html.template"}''', 
//                      subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Successful", 
//                      mimeType: 'text/html',to: "ashfaque.s510@gmail.com"
//       }      
//    }// end

}// end pipelines 